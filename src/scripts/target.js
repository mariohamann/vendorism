import { globby } from 'globby';
import path from 'path';
import fs from 'fs';
import { execSync } from 'child_process';

export const defaults = {
  head: `// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n`,
};

export async function removeVendors(config) {
  console.log(config.target.path)
  const files = await globby(`${config.target.path}/**/*`, config.target.removeVendors?.globby || { gitignore: true }); // adjust the pattern as needed

  for (const file of files) {
    const content = fs.readFileSync(file, 'utf8');
    if (content.startsWith(config.target.head)) {
      fs.unlinkSync(file);
      let currentDir = path.dirname(file);
      while (currentDir !== config.target.path) {
        if (fs.readdirSync(currentDir).length === 0) {
          fs.rmdirSync(currentDir);
          currentDir = path.dirname(currentDir);
        } else {
          break;
        }
      }
    }
  }
}

export async function createVendors(config, files) {
  const includes = [...(config.target.includes || []), ...(files || [])];
  let overriden = [];
  for (const file of includes) {
    const sourcePath = path.join(config.source.path, file);
    const targetPath = path.join(config.target.path, file);

    // Check if target file already exists
    if (fs.existsSync(targetPath)) {
      continue; // skip copying
    }

    // Read source content, prepend header, and write to target
    const content = fs.readFileSync(sourcePath, 'utf8');
    const contentWithHead = defaults.head + content;

    fs.mkdirSync(path.dirname(targetPath), { recursive: true });
    fs.writeFileSync(targetPath, contentWithHead, 'utf8');

    // overriden.push(targetPath.replace(/\\/g, "/"));
  }
  return overriden;
}


export const setTarget = async (config) => {
  if (config.target.hooks?.before) {
    await execSync(config.target.hooks.before);
  }

  if (!config.target.head) {
    config.target.head = defaults.head;
  }

  if (config.target?.path) {
    await removeVendors(config);
    await createVendors(config);
    // await download(config.target.url, config.target.path, { ...config.downloadConfig, extract: true });
  }

  if (config.target.hooks?.after) {
    await execSync(config.target.hooks.after);
  }
}
